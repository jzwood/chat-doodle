{"version":3,"sources":["controller.js","draw.js","modal.js","utils.js"],"names":["controller","canvas","initCanvas","width","height","ctx","lineWidth","lineCap","eventToXY","event","touches","clientX","clientY","handleDrawStart","e","drawState","isDrawing","_eventToXY","_eventToXY2","_slicedToArray","x","y","x1","parseFloat","toFixed","decimalLimit","y1","x2","y2","handleDrawMove","preventDefault","_eventToXY3","_eventToXY4","handleDrawStop","handleResize","window","innerWidth","innerHeight","lineMap","forEach","points","line","split","map","i","parseInt","clickRefresh","clearBackground","socket","emit","room","clickUndo","clearRect","slice","clickShare","copyModal","show","clickAbout","aboutModal","fillStyle","color","beginPath","moveTo","lineTo","stroke","length","getContext","getShareModal","getAboutModal","disableDrawing","onShow","onHide","setTimeout","isErasing","step","this","bgcolor","document","addEventListener","debounce","refresh","querySelector","undo","share","about","setRoom","r","setBackground","arguments","undefined","fillRect","draw","ds","setKey","join","push","start","ctrl","io","location","pathname","on","data","MainLoop","setMaxAllowedFPS","setDraw","url","href","nanoModal","overlayClose","classes","buttons","text","handler","modal","getElementById","select","execCommand","innerText","primary","avg","vals","reduce","a","b","mod","val","base","temp","throttle","func","ms","_arguments","_this","last","t","now","Date","apply","wait","immediate","_this2","_arguments2","timeout","context","args","later","callNow","clearTimeout"],"mappings":"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","file":"main.js","sourcesContent":["function controller(canvas){\n  const ctx = canvas.getContext('2d')\n  let width = window.innerWidth, height = window.innerHeight,\n    epsilon = 0.01, decimalLimit = 0\n  let lineMap = [], copyModal = getShareModal(), aboutModal = getAboutModal()\n\n  let disableDrawing = false\n  copyModal.onShow(() => {\n    disableDrawing = true\n  })\n\n  aboutModal.onShow(() => {\n    disableDrawing = true\n  })\n\n  copyModal.onHide(() => {\n    window.setTimeout(() => {\n      disableDrawing = false\n    }, 200)\n  })\n\n  aboutModal.onHide(() => {\n    window.setTimeout(() => {\n      disableDrawing = false\n    }, 200)\n  })\n\n  let room\n\n  const drawState = {x1:0, y1:0, x2: 0, y2: 0, isDrawing: false, isErasing: false, step(){\n    this.x1 = this.x2\n    this.y1 = this.y2\n  }}\n\n  let bgcolor = '#ffffff',\n    color = '#000000'\n\n  initCanvas()\n  registerTouchEvents()\n\n\n  function initCanvas(){\n    canvas.width = width\n    canvas.height = height\n    ctx.lineWidth = 8\n    ctx.lineCap = 'round'\n  }\n\n  function eventToXY(event){\n    return event.touches ? [event.touches[0].clientX, event.touches[0].clientY] : [event.clientX, event.clientY]\n  }\n\n  function handleDrawStart(e){\n    drawState.isDrawing = true\n    const [x, y] = eventToXY(e)\n    drawState.x1 = parseFloat((x).toFixed(decimalLimit))\n    drawState.y1 = parseFloat((y).toFixed(decimalLimit))\n    drawState.x2 = parseFloat((x).toFixed(decimalLimit))\n    drawState.y2 = parseFloat((y).toFixed(decimalLimit))\n  }\n\n  function handleDrawMove(e){\n    e.preventDefault()\n    const [x, y] = eventToXY(e)\n    drawState.x2 = parseFloat((x).toFixed(decimalLimit))\n    drawState.y2 = parseFloat((y).toFixed(decimalLimit))\n  }\n\n  function handleDrawStop(e){\n    drawState.isDrawing = false\n  }\n\n  function handleResize(e){\n    width = window.innerWidth\n    height = window.innerHeight\n    initCanvas()\n    lineMap.forEach(points => {\n      line(...points.split(',').map(i => parseInt(i)))\n    })\n  }\n\n  function clickRefresh(){\n    clearBackground()\n    socket.emit('clear', room)\n  }\n\n  function clickUndo(){\n    ctx.clearRect(0, 0, width, height)\n    lineMap = lineMap.slice(0,-2).map(points => {\n      line(...points.split(',').map(i => parseInt(i)))\n      return points\n    })\n  }\n\n  function clickShare(){\n    copyModal.show()\n  }\n\n  function clickAbout(){\n    aboutModal.show()\n  }\n\n  function registerTouchEvents(){\n    document.addEventListener('touchstart', handleDrawStart)\n    document.addEventListener('touchmove', handleDrawMove)\n    document.addEventListener('touchend', handleDrawStop)\n    document.addEventListener('mousedown', handleDrawStart)\n    document.addEventListener('mousemove', handleDrawMove)\n    document.addEventListener('mouseup', handleDrawStop)\n    window.addEventListener('resize', debounce(handleResize, 100))\n\n    const refresh = document.querySelector('.btn__refresh')\n    refresh.addEventListener('touchend', clickRefresh)\n    refresh.addEventListener('mouseup', clickRefresh)\n\n    const undo = document.querySelector('.btn__erase')\n    undo.addEventListener('touchend', clickUndo)\n    undo.addEventListener('mouseup', clickUndo)\n\n    const share = document.querySelector('.btn__share')\n    share.addEventListener('touchend', clickShare)\n    share.addEventListener('mouseup', clickShare)\n\n    const about = document.querySelector('.btn__about')\n    about.addEventListener('touchend', clickAbout)\n    about.addEventListener('mouseup', clickAbout)\n  }\n\n  function line(x1, y1, x2, y2){\n      ctx.fillStyle = color\n      ctx.beginPath()\n      ctx.moveTo(x1, y1)\n      ctx.lineTo(x2, y2)\n      ctx.stroke()\n  }\n\n  function clearBackground(){\n    ctx.clearRect(0, 0, width, height)\n    lineMap.length = 0\n  }\n\n  return {\n    line,\n    clearBackground,\n    setRoom(r){\n      room = r\n    },\n    setBackground(color='#ffffff'){\n      bgcolor = color\n      ctx.fillStyle = bgcolor\n      ctx.fillRect(0, 0, width, height)\n      ctx.fillStyle = color\n    },\n    draw(){\n      if(drawState.isDrawing && !disableDrawing){\n        const ds = drawState,\n          setKey = [ds.x1, ds.y1, ds.x2, ds.y2].join(',')\n        if(lineMap.slice(-1)[0] !== setKey){\n          socket.emit('pushData', room, {x1:ds.x1, y1:ds.y1, x2:ds.x2, y2:ds.y2})\n          line(ds.x1, ds.y1, ds.x2, ds.y2)\n          lineMap.push(setKey)\n          ds.step()\n        }\n      }\n    }\n  }\n}\n","'use strict'\nvar io, socket\n\ndocument.addEventListener(\"DOMContentLoaded\", e => {\n  start()\n})\n\n\nfunction start(){\n  const canvas = document.querySelector('.canvas-wrapper__canvas')\n  if (canvas.getContext) {\n    const ctrl = controller(canvas)\n    ctrl.setBackground('#ffffff')\n\n    socket = io('/')\n    let room = window.location.pathname.slice(-40)\n\n    ctrl.setRoom(room)\n\n    socket.emit('init', room)\n\n    socket.on('linePositionData', data => {\n      ctrl.line(data.x1, data.y1, data.x2, data.y2)\n    })\n\n    socket.on('clear', ctrl.clearBackground)\n\n    MainLoop.setMaxAllowedFPS([60]).setDraw(ctrl.draw).start()\n  }\n\n}\n","function getShareModal() {\n\tconst url = window.location.href\n\treturn nanoModal(`\n    Anyone who goes to<br>\n    <input id=\"copyURL\" size=\"${url.length}\" value=\"${url}\"></input><br>\n    will join this real-time doodle.\n    `, {\n\t\toverlayClose: false,\n    classes: 'shareModal',\n\t\tbuttons: [{\n\t\t\ttext: 'Copy URL to clipboard',\n\t\t\thandler: function(modal) {\n\t\t\t\tconst urlEl = document.getElementById('copyURL')\n\t\t\t\turlEl.select()\n\t\t\t\tdocument.execCommand('copy')\n\t\t\t\tdocument.querySelector('.nanoModalBtnPrimary').innerText = 'Copied'\n\t\t\t},\n\t\t\tprimary: true\n\t\t}, {\n\t\t\ttext: 'Cancel',\n\t\t\thandler: 'hide'\n\t\t}]\n\t})\n}\n\nfunction getAboutModal() {\n\treturn nanoModal(`\n    Icons from the <a href=\"https://thenounproject.com/\" target=\"_blank\">Noun Project</a>.<br>\n    <u><a href=\"https://thenounproject.com/term/share/1020875/\" target=\"_blank\">Share</a></u> and <u><a href=\"https://thenounproject.com/term/refresh/1020876/\" target=\"_blank\">refresh</a></u> icon created by <a href=\"https://thenounproject.com/pundimon/\" target=\"_blank\">Pundimon</a>.<br>\n    <u><a href=\"https://thenounproject.com/term/erasing/1005575/\" target=\"_blank\">Erase</a></u> icon modified from icon created by <a href=\"https://thenounproject.com/madeleine.bennett/\" target=\"_blank\">Madeleine Bennett</a>.<br>\n    All icons used under the <a href=\"https://creativecommons.org/licenses/by/3.0/us/legalcode\" target=\"_blank\">Creative Commons</a> License.\n    `, {\n\t\toverlayClose: false,\n    classes: 'aboutModal',\n\t\tbuttons: [{\n\t\t\ttext: 'Close',\n\t\t\thandler: 'hide',\n\t\t\tprimary: true\n\t\t}]\n\t})\n}\n","function avg(vals) {\n  return vals.reduce(function(a, b) {\n    return a + b\n  }, 0) / vals.length\n}\n\n//mod is used for wrapping the diamond coordinates\n//around the grid. The algorithm below returns the\n//positive mod value.\nfunction mod(val, base) {\n  var temp = val % base\n  while (temp <= 0) {\n    temp += base\n  }\n  return temp\n}\n\nfunction throttle(func, ms){\n  let last = 0\n  return () => {\n    const a = arguments, t = this, now = +(new Date)\n    //b/c last = 0 will still run the first time called\n    if(now >= last + ms){\n      last = now\n      func.apply(t, a)\n    }\n  }\n}\n\nfunction debounce(func, wait, immediate) {\n  let timeout\n  return () => {\n    const context = this, args = arguments\n    const later = () => {\n      timeout = null\n      if (!immediate) func.apply(context, args)\n    }\n    const callNow = immediate && !timeout\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n    if (callNow) func.apply(context, args)\n  }\n}\n"],"sourceRoot":"/source/"}
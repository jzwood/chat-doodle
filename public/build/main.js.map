{"version":3,"sources":["controller.js","draw.js","modal.js","utils.js"],"names":["controller","canvas","initCanvas","width","height","ctx","lineWidth","lineCap","eventToXY","event","touches","clientX","clientY","handleDrawStart","e","drawState","isDrawing","_eventToXY","_eventToXY2","_slicedToArray","x","y","x1","parseFloat","toFixed","decimalLimit","y1","x2","y2","handleDrawMove","_eventToXY3","_eventToXY4","handleDrawStop","handleResize","window","innerWidth","innerHeight","lineMap","forEach","points","line","split","map","i","parseInt","clickRefresh","clearBackground","socket","emit","room","clickUndo","clearRect","slice","clickShare","preventDefault","modal","show","fillStyle","color","beginPath","moveTo","lineTo","closePath","stroke","length","getContext","getModal","isErasing","step","this","bgcolor","document","addEventListener","debounce","refresh","querySelector","undo","share","setRoom","r","setBackground","arguments","undefined","fillRect","draw","ds","setKey","join","push","start","ctrl","io","location","pathname","on","data","MainLoop","setMaxAllowedFPS","setDraw","url","href","nanoModal","overlayClose","buttons","text","handler","getElementById","select","execCommand","innerText","primary","avg","vals","reduce","a","b","mod","val","base","temp","throttle","func","ms","_arguments","_this","last","t","now","Date","apply","wait","immediate","_this2","_arguments2","timeout","context","args","later","callNow","clearTimeout","setTimeout"],"mappings":"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","file":"main.js","sourcesContent":["function controller(canvas){\n  const ctx = canvas.getContext('2d')\n  let width = window.innerWidth, height = window.innerHeight,\n    epsilon = 0.01, decimalLimit = 0\n  let lineMap = [], modal = getModal()\n\n  window.modal = modal\n\n  let room\n\n  const drawState = {x1:0, y1:0, x2: 0, y2: 0, isDrawing: false, isErasing: false, step(){\n    this.x1 = this.x2\n    this.y1 = this.y2\n  }}\n\n  let bgcolor = '#ffffff',\n    color = '#000000'\n\n  initCanvas()\n  registerTouchEvents()\n\n\n  function initCanvas(){\n    canvas.width = width\n    canvas.height = height\n    ctx.lineWidth = 8\n    ctx.lineCap = 'round'\n  }\n\n  function eventToXY(event){\n    return event.touches ? [event.touches[0].clientX, event.touches[0].clientY] : [event.clientX, event.clientY]\n  }\n\n  function handleDrawStart(e){\n    drawState.isDrawing = true\n    const [x, y] = eventToXY(e)\n    drawState.x1 = parseFloat((x).toFixed(decimalLimit))\n    drawState.y1 = parseFloat((y).toFixed(decimalLimit))\n    drawState.x2 = parseFloat((x).toFixed(decimalLimit))\n    drawState.y2 = parseFloat((y).toFixed(decimalLimit))\n  }\n\n  function handleDrawMove(e){\n    const [x, y] = eventToXY(e)\n    drawState.x2 = parseFloat((x).toFixed(decimalLimit))\n    drawState.y2 = parseFloat((y).toFixed(decimalLimit))\n  }\n\n  function handleDrawStop(e){\n    drawState.isDrawing = false\n  }\n\n  function handleResize(e){\n    width = window.innerWidth\n    height = window.innerHeight\n    initCanvas()\n    lineMap.forEach(points => {\n      line(...points.split(',').map(i => parseInt(i)))\n    })\n  }\n\n  function clickRefresh(){\n    clearBackground()\n    socket.emit('clear', room)\n  }\n\n  function clickUndo(){\n    ctx.clearRect(0, 0, width, height)\n    lineMap = lineMap.slice(0,-2).map(points => {\n      line(...points.split(',').map(i => parseInt(i)))\n      return points\n    })\n  }\n\n  function clickShare(e){\n    e.preventDefault()\n    modal.show()\n  }\n\n  function registerTouchEvents(){\n    document.addEventListener('touchstart', handleDrawStart)\n    document.addEventListener('touchmove', handleDrawMove)\n    document.addEventListener('touchend', handleDrawStop)\n    document.addEventListener('mousedown', handleDrawStart)\n    document.addEventListener('mousemove', handleDrawMove)\n    document.addEventListener('mouseup', handleDrawStop)\n    window.addEventListener('resize', debounce(handleResize, 100))\n\n    const refresh = document.querySelector('.btn__refresh')\n    refresh.addEventListener('touchend', clickRefresh)\n    refresh.addEventListener('mouseup', clickRefresh)\n\n    const undo = document.querySelector('.btn__erase')\n    undo.addEventListener('touchend', clickUndo)\n    undo.addEventListener('mouseup', clickUndo)\n\n    const share = document.querySelector('.btn__share')\n    share.addEventListener('touchend', clickShare)\n    share.addEventListener('mouseup', clickShare)\n  }\n\n  function line(x1, y1, x2, y2){\n      ctx.fillStyle = color\n      ctx.beginPath()\n      ctx.moveTo(x1, y1)\n      ctx.lineTo(x2, y2)\n      ctx.closePath()\n      ctx.stroke()\n  }\n\n  function clearBackground(){\n    ctx.clearRect(0, 0, width, height)\n    lineMap.length = 0\n  }\n\n  return {\n    line,\n    clearBackground,\n    setRoom(r){\n      room = r\n    },\n    setBackground(color='#ffffff'){\n      bgcolor = color\n      ctx.fillStyle = bgcolor\n      ctx.fillRect(0, 0, width, height)\n      ctx.fillStyle = color\n    },\n    draw(){\n      if(drawState.isDrawing){\n        const ds = drawState,\n          setKey = [ds.x1, ds.y1, ds.x2, ds.y2].join(',')\n        if(lineMap.slice(-1)[0] !== setKey){\n          socket.emit('pushData', room, {x1:ds.x1, y1:ds.y1, x2:ds.x2, y2:ds.y2})\n          line(ds.x1, ds.y1, ds.x2, ds.y2)\n          lineMap.push(setKey)\n          ds.step()\n        }\n      }\n    }\n  }\n}\n","'use strict'\nvar io, socket\n\ndocument.addEventListener(\"DOMContentLoaded\", e => {\n  start()\n})\n\n\nfunction start(){\n  const canvas = document.querySelector('.canvas-wrapper__canvas')\n  if (canvas.getContext) {\n    const ctrl = controller(canvas)\n    ctrl.setBackground('#ffffff')\n\n    socket = io('/')\n    let room = window.location.pathname.slice(-40)\n\n    ctrl.setRoom(room)\n\n    socket.emit('init', room)\n\n    socket.on('linePositionData', data => {\n      ctrl.line(data.x1, data.y1, data.x2, data.y2)\n    })\n\n    socket.on('clear', ctrl.clearBackground)\n\n    MainLoop.setMaxAllowedFPS([60]).setDraw(ctrl.draw).start()\n  }\n\n}\n","function getModal() {\n  const url = window.location.href\n\treturn nanoModal(`\n    Anyone who goes to<br>\n    <input id=\"copyURL\" size=\"${url.length}\" value=\"${url}\"></input><br>\n    will join this real-time doodle.\n    `, {\n\t\toverlayClose: false,\n\t\tbuttons: [{\n\t\t\ttext: \"Copy URL to clipboard\",\n      handler: function(modal) {\n        const urlEl = document.getElementById('copyURL')\n        urlEl.select()\n        document.execCommand('copy')\n        document.querySelector('.nanoModalBtnPrimary').innerText = 'Copied'\n\t\t\t},\n\t\t\tprimary: true\n\t\t}, {\n\t\t\ttext: \"Cancel\",\n      handler: \"hide\"\n\t\t}]\n\t})\n}\n","function avg(vals) {\n  return vals.reduce(function(a, b) {\n    return a + b\n  }, 0) / vals.length\n}\n\n//mod is used for wrapping the diamond coordinates\n//around the grid. The algorithm below returns the\n//positive mod value.\nfunction mod(val, base) {\n  var temp = val % base\n  while (temp <= 0) {\n    temp += base\n  }\n  return temp\n}\n\nfunction throttle(func, ms){\n  let last = 0\n  return () => {\n    const a = arguments, t = this, now = +(new Date)\n    //b/c last = 0 will still run the first time called\n    if(now >= last + ms){\n      last = now\n      func.apply(t, a)\n    }\n  }\n}\n\nfunction debounce(func, wait, immediate) {\n  let timeout\n  return () => {\n    const context = this, args = arguments\n    const later = () => {\n      timeout = null\n      if (!immediate) func.apply(context, args)\n    }\n    const callNow = immediate && !timeout\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n    if (callNow) func.apply(context, args)\n  }\n}\n"],"sourceRoot":"/source/"}
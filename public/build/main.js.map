{"version":3,"sources":["controller.js","draw.js","utils.js"],"names":["controller","canvas","initCanvas","width","height","ctx","lineWidth","lineCap","eventToXY","event","touches","clientX","clientY","handleDrawStart","e","drawState","isDrawing","_eventToXY","_eventToXY2","_slicedToArray","x","y","x1","parseFloat","toFixed","decimalLimit","y1","x2","y2","handleDrawMove","_eventToXY3","_eventToXY4","handleDrawStop","handleResize","window","innerWidth","innerHeight","resetNav","lineSet","forEach","points","line","split","map","i","parseInt","fillStyle","color","beginPath","moveTo","lineTo","closePath","stroke","getContext","Set","room","step","this","bgcolor","document","addEventListener","debounce","setBackground","arguments","length","undefined","console","log","fillRect","clearBackground","clearRect","setRoom","r","draw","ds","setKey","join","has","socket","emit","add","nav","querySelector","style","childElementCount","start","ctrl","io","location","pathname","slice","on","data","cx2","MainLoop","setMaxAllowedFPS","setDraw","avg","vals","reduce","a","b","mod","val","base","temp","throttle","func","ms","_arguments","_this","last","t","now","Date","apply","wait","immediate","_this2","_arguments2","timeout","context","args","later","callNow","clearTimeout","setTimeout"],"mappings":"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","file":"main.js","sourcesContent":["function controller(canvas){\n  const ctx = canvas.getContext('2d')\n  let width = window.innerWidth, height = window.innerHeight,\n    epsilon = 0.01, decimalLimit = 0\n  const lineSet = new Set()\n\n  let room\n\n  const drawState = {x1:0, y1:0, x2: 0, y2: 0, isDrawing: false, step(){\n    this.x1 = this.x2\n    this.y1 = this.y2\n  }}\n\n  let bgcolor = '#ffffff',\n    color = '#000000'\n\n  initCanvas()\n  registerTouchEvents()\n\n\n  function initCanvas(){\n    canvas.width = width\n    canvas.height = height\n    ctx.lineWidth = 8\n    ctx.lineCap = 'round'\n  }\n\n  function eventToXY(event){\n    return event.touches ? [event.touches[0].clientX, event.touches[0].clientY] : [event.clientX, event.clientY]\n  }\n\n  function handleDrawStart(e){\n    drawState.isDrawing = true\n    const [x, y] = eventToXY(e)\n    drawState.x1 = parseFloat((x).toFixed(decimalLimit))\n    drawState.y1 = parseFloat((y).toFixed(decimalLimit))\n    drawState.x2 = parseFloat((x).toFixed(decimalLimit))\n    drawState.y2 = parseFloat((y).toFixed(decimalLimit))\n  }\n\n  function handleDrawMove(e){\n    const [x, y] = eventToXY(e)\n    drawState.x2 = parseFloat((x).toFixed(decimalLimit))\n    drawState.y2 = parseFloat((y).toFixed(decimalLimit))\n  }\n\n  function handleDrawStop(e){\n    drawState.isDrawing = false\n  }\n\n  function handleResize(e){\n    width = window.innerWidth\n    height = window.innerHeight\n    initCanvas()\n    resetNav()\n    lineSet.forEach(points => {\n      line(...points.split(',').map(i => parseInt(i)))\n    })\n  }\n\n  function registerTouchEvents(){\n    document.addEventListener('touchstart', handleDrawStart)\n    document.addEventListener('touchmove', handleDrawMove)\n    document.addEventListener('touchend', handleDrawStop)\n    document.addEventListener('mousedown', handleDrawStart)\n    document.addEventListener('mousemove', handleDrawMove)\n    document.addEventListener('mouseup', handleDrawStop)\n    window.addEventListener('resize', debounce(handleResize, 100))\n  }\n\n  function line(x1, y1, x2, y2){\n      ctx.fillStyle = color\n      ctx.beginPath()\n      ctx.moveTo(x1, y1)\n      ctx.lineTo(x2, y2)\n      ctx.closePath()\n      ctx.stroke()\n  }\n\n  return {\n    line,\n    setBackground(color='#ffffff'){\n      console.log('setBackground')\n      bgcolor = color\n      ctx.fillStyle = bgcolor\n      ctx.fillRect(0, 0, width, height)\n      ctx.fillStyle = color\n    },\n    clearBackground(){\n      console.log('clearBackground')\n      ctx.clearRect(0, 0, width, height)\n    },\n    setRoom(r){\n      room = r\n    },\n    draw(){\n      if(drawState.isDrawing){\n        const ds = drawState,\n          setKey = [ds.x1, ds.y1, ds.x2, ds.y2].join(',')\n        if(!lineSet.has(setKey)){\n          socket.emit('pushData', room, {x1:ds.x1, y1:ds.y1, x2:ds.x2, y2:ds.y2})\n          line(ds.x1, ds.y1, ds.x2, ds.y2)\n          lineSet.add(setKey)\n          ds.step()\n        }\n      }\n    }\n  }\n}\n","'use strict'\nvar io, socket\n\ndocument.addEventListener(\"DOMContentLoaded\", e => {\n  start()\n})\n\nfunction resetNav(){\n  const nav = document.querySelector('.nav')\n  // nav.style.width = canvas.width + 'px'\n  nav.style.height = ~~(window.innerWidth / nav.childElementCount) + 'px'\n}\n\nfunction start(){\n  const canvas = document.querySelector('.canvas-wrapper__canvas')\n  if (canvas.getContext) {\n    const ctrl = controller(canvas)\n    ctrl.setBackground('#ffffff')\n\n    resetNav()\n\n    socket = io('/')\n    let room = window.location.pathname.slice(-40)\n\n    ctrl.setRoom(room)\n\n    socket.emit('init', room)\n\n    socket.on('linePositionData', data => {\n      ctrl.line(data.x1, data.y1, data.x2, data.y2)\n    })\n\n    socket.on('clear', () => {\n      ctrl.clearBackground(cx2, canvas)\n    })\n\n    MainLoop.setMaxAllowedFPS([60]).setDraw(ctrl.draw).start()\n  }\n\n}\n","function avg(vals) {\n  return vals.reduce(function(a, b) {\n    return a + b\n  }, 0) / vals.length\n}\n\n//mod is used for wrapping the diamond coordinates\n//around the grid. The algorithm below returns the\n//positive mod value.\nfunction mod(val, base) {\n  var temp = val % base\n  while (temp <= 0) {\n    temp += base\n  }\n  return temp\n}\n\nfunction throttle(func, ms){\n  let last = 0\n  return () => {\n    const a = arguments, t = this, now = +(new Date)\n    //b/c last = 0 will still run the first time called\n    if(now >= last + ms){\n      last = now\n      func.apply(t, a)\n    }\n  }\n}\n\nfunction debounce(func, wait, immediate) {\n  let timeout\n  return () => {\n    const context = this, args = arguments\n    const later = () => {\n      timeout = null\n      if (!immediate) func.apply(context, args)\n    }\n    const callNow = immediate && !timeout\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n    if (callNow) func.apply(context, args)\n  }\n}\n"],"sourceRoot":"/source/"}
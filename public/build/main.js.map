{"version":3,"sources":["controller.js","draw2.js","utils.js"],"names":["controller","canvas","handleFingerDown","e","drawState","isDrawing","_ref","touches","clientX","clientY","x","y","x1","xOffset","y1","yOffset","x2","y2","handleFingerDrag","handleFingerUp","handleResize","width","window","innerWidth","height","innerHeight","line","ctx","fillStyle","color","beginPath","moveTo","lineTo","closePath","stroke","getContext","step","this","bgcolor","console","log","lineWidth","lineCap","document","addEventListener","debounce","setBackground","arguments","length","undefined","fillRect","clearBackground","clearRect","draw","ds","start","querySelector","ctrl","isPrivate","location","href","indexOf","socket","io","room","pathname","slice","emit","on","data","cx2","MainLoop","setMaxAllowedFPS","setDraw","avg","vals","reduce","a","b","mod","val","base","temp","throttle","func","ms","_arguments","_this","last","t","now","Date","apply","wait","immediate","_this2","_arguments2","timeout","context","args","later","callNow","clearTimeout","setTimeout"],"mappings":"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","file":"main.js","sourcesContent":["function controller(canvas){\n  const ctx = canvas.getContext('2d')\n  let width = window.innerWidth, height = window.innerHeight,\n    xOffset = 0, yOffset = 0,\n    epsilon = 0.01\n\n  const drawState = {x1:0, y1:0, x2: 0, y2: 0, isDrawing: false, step(){\n    this.x1 = this.x2\n    this.y1 = this.y2\n  }}\n\n  let bgcolor = '#ffffff',\n    color = '#000000'\n\n  initCanvas()\n  registerTouchEvents()\n\n\n  function initCanvas(){\n    canvas.width = width\n    canvas.height = height\n\n    console.log(canvas, width, height)\n    ctx.lineWidth = 5\n    ctx.lineCap = 'round'\n  }\n\n  function handleFingerDown(e){\n    drawState.isDrawing = true\n    let [x, y] = [e.touches[0].clientX, e.touches[0].clientY]\n    drawState.x1 = x - xOffset\n    drawState.y1 = y - yOffset\n    drawState.x2 = x - xOffset\n    drawState.y2 = y - yOffset\n  }\n\n  function handleFingerDrag(e){\n      drawState.x2 = e.touches[0].clientX - xOffset\n      drawState.y2 = e.touches[0].clientY - yOffset\n  }\n\n  function handleFingerUp(e){\n    drawState.isDrawing = false\n  }\n\n  function handleResize(e){\n    width = window.innerWidth\n    height = window.innerHeight\n    xOffset = (width - canvas.width) * 0.5\n    yOffset = (height - canvas.height) * 0\n  }\n\n  function registerTouchEvents(){\n    document.addEventListener('touchstart', handleFingerDown)\n    document.addEventListener('touchmove', handleFingerDrag)\n    document.addEventListener('touchend', handleFingerUp)\n    window.addEventListener('resize', debounce(handleResize, 100))\n  }\n\n  function line(x1, y1, x2, y2){\n      ctx.fillStyle = color\n      ctx.beginPath()\n      ctx.moveTo(x1, y1)\n      ctx.lineTo(x2, y2)\n      ctx.closePath()\n      ctx.stroke()\n  }\n\n  return {\n    line,\n    setBackground(color='#ffffff'){\n      console.log('setBackground')\n      bgcolor = color\n      ctx.fillStyle = bgcolor\n      ctx.fillRect(0, 0, width, height)\n      ctx.fillStyle = color\n    },\n    clearBackground(){\n      console.log('clearBackground')\n      ctx.clearRect(0, 0, width, height)\n    },\n    draw(){\n      if(drawState.isDrawing){\n        const ds = drawState\n        console.log(ds.x1, ds.y1, ds.x2, ds.y2)\n        line(ds.x1, ds.y1, ds.x2, ds.y2)\n        ds.step()\n      }\n    }\n  }\n}\n/*\nfunction draw(){\n  if(p.keyCode === 114){\n    p.background(bgcolor)\n    socket.emit('clear', room)\n  }\n  if(p.touchIsDown || p.mouseIsPressed){\n    const [x2, y2] = p.touchIsDown ? [p.touchX, p.touchY] : [p.mouseX, p.mouseY]\n    if(x > 0 && y > 0){\n      p.line(x, y, x2, y2)\n      socket.emit('pushData', room, {x, y, x2, y2})\n    }\n    x = x2\n    y = y2\n  }else{\n    x = 0\n    y = 0\n  }\n}\n*/\n","'use strict'\nvar io, socket\n\ndocument.addEventListener(\"DOMContentLoaded\", e => {\n  start()\n})\n\nfunction start(){\n  const canvas = document.querySelector('.canvas-wrapper__canvas')\n  if (canvas.getContext) {\n    const ctrl = controller(canvas)\n    ctrl.setBackground('#ffffff')\n\n    const isPrivate = location.href.indexOf('/private')\n    socket = isPrivate > 0 ? io('/private') : io('/public')\n    let room = window.location.pathname.slice(-40)\n\n    socket.emit('init', room)\n\n    socket.on('linePositionData', data => {\n      ctrl.line(data.x, data.y, data.x2, data.y2)\n    })\n\n    socket.on('clear', () => {\n      ctrl.clearBackground(cx2, canvas)\n    })\n\n    MainLoop.setMaxAllowedFPS([60]).setDraw(ctrl.draw).start()\n  }\n\n}\n","function avg(vals) {\n  return vals.reduce(function(a, b) {\n    return a + b\n  }, 0) / vals.length\n}\n\n//mod is used for wrapping the diamond coordinates\n//around the grid. The algorithm below returns the\n//positive mod value.\nfunction mod(val, base) {\n  var temp = val % base\n  while (temp <= 0) {\n    temp += base\n  }\n  return temp\n}\n\nfunction throttle(func, ms){\n  let last = 0\n  return () => {\n    const a = arguments, t = this, now = +(new Date)\n    //b/c last = 0 will still run the first time called\n    if(now >= last + ms){\n      last = now\n      func.apply(t, a)\n    }\n  }\n}\n\nfunction debounce(func, wait, immediate) {\n  let timeout\n  return () => {\n    const context = this, args = arguments\n    const later = () => {\n      timeout = null\n      if (!immediate) func.apply(context, args)\n    }\n    const callNow = immediate && !timeout\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n    if (callNow) func.apply(context, args)\n  }\n}\n"],"sourceRoot":"/source/"}